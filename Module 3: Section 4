1. Lists

-Variables that store more than one value
-multi-value variables
-may contain value of different data types
-starts with open square brackets and ends with closed sqaure brackets

-indexing starts from zero
-remove elements: del list1[1]: delete element with index i in list list1
-negative indices are legal

2. Function and methods:
-function does not belong to any data, it is owned by whole code, i.e. global scope
-method is specific kind of function that is owned by a data it works for, it can change the state of selected entity.

3. Invoking function
- a function invocation is simple, by passing arguments to it
-a function takes arguments, executes block of code in the function and returns the result.

4. Invoking methods:
- the name of the method is preceded by the name of the data which owns the method. 
-Next, you add a dot, followed by the method name, and a pair of parenthesis enclosing the arguments.
- a method can do what a function does, but it does something extra i.e. change the internal state of the data to which it belongs

5. Methods are used to manipulate lists, lists own methods which can be used to add,delete, and execute similar operations on list.
-append(): add element to the end of list
-insert(): add element to specified index in a list --  list.insert(location,value)



SECTION SUMMARY
1. The list is a type of data in Python used to store multiple objects. It is an ordered and mutable collection of comma-separated items between square brackets, e.g.:


              my_list = [1, None, True, "I am a string", 256, 0]
 
2. Lists can be indexed and updated, e.g.:


            my_list = [1, None, True, 'I am a string', 256, 0]
            print(my_list[3])  # outputs: I am a string
            print(my_list[-1])  # outputs: 0
             
            my_list[1] = '?'
            print(my_list)  # outputs: [1, '?', True, 'I am a string', 256, 0]
             
            my_list.insert(0, "first")
            my_list.append("last")
            print(my_list)  # outputs: ['first', 1, '?', True, 'I am a string', 256, 0, 'last']
 
3. Lists can be nested, e.g.:


            my_list = [1, 'a', ["list", 64, [0, 1], False]]
 

4. List elements and lists can be deleted, e.g.:


          my_list = [1, 2, 3, 4]
          del my_list[2]
          print(my_list)  # outputs: [1, 2, 4]
           
          del my_list  # deletes the whole list
 

5. Lists can be iterated through using the for loop, e.g.:


          my_list = ["white", "purple", "blue", "yellow", "green"]
           
          for color in my_list:
              print(color)
 
6. The len() function may be used to check the list's length, e.g.:


my_list = ["white", "purple", "blue", "yellow", "green"]
print(len(my_list))  # outputs 5
 
del my_list[2]
print(len(my_list))  # outputs 4
 
7. A typical function invocation looks as follows: result = function(arg), while a typical method invocation looks like this:result = data.method(arg).
