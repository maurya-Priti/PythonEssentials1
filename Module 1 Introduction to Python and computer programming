Section 1 – Introduction to Programming

1. How does a computer program work?
   -A program makes a computer usable
   -A program is set to instructions used to solve a particular problem
   -Language is the keyword, used to write a program

2. Language
   -A language is a means (and a tool) for expressing and recording thoughts. 
   -Each language (machine or natural, it doesn't matter) consists of the following elements:
   
       -an alphabet:
       set of symbols used to build words of a certain language 
       
       -a lexis:
       (aka a dictionary) a set of words the language offers its users
       
       -a syntax
       a set of rules (formal or informal, written or felt intuitively) used to determine if a certain string of words forms a valid sentence 
       
       -semantics
       a set of rules determining if a certain phrase makes sense

      Natural Language:human language
      
      Machine Language:developed by humansthat is understood by computers
      The IL(Instruction List i.e. complete set of known commands ) is, the alphabet of a machine language. 
      This is the simplest and most primary set of symbols we can use to give commands to a computer. 
      It's the computer's mother tongue.
      
      High-level Language:bridge between computers and programmers
      a language in which humans can write their programs and a language that computers may use to execute the programs

3. Translation

Compilation 
– the source program is translated once (however, this act must be repeated each time you modify the source code) 
- by getting a file (e.g., an .exe file if the code is intended to be run under MS Windows) containing the machine code. 
- Now you can distribute the file worldwide; the program that performs this translation is called a compiler or translator


Interpretation 
– you (or any user of the code) can translate the source program each time it has to be run. 
-The program performing this kind of transformation is called an interpreter, as it interprets the code every time it is intended to be executed. 
-It also means that you cannot just distribute the source code as-is, because the end-user also needs the interpreter to execute it.

A particular high-level programming language is designed to fall into one of these two categories.

There are very few languages that can be both compiled and interpreted. 
Usually, a programming language is projected with this factor in its constructors' minds – will it be compiled or interpreted?

Python is an interpreted language. 
  This means that it inherits all the described advantages and disadvantages. 
