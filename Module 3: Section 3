Logic and Bit operations:

1. Computer Logic:
    Conjuction - and , combining two or more  conditions, all conditions must be fullfilled 
    Disjunction - or , combining two or more conditions, atleast one condition must be fullfilled

2. Python and logic:
    TO express these logics in python, logical operatots are used.
    -Conjuction: 'and' operator ('&')
    -Disjunction: 'or' operator ('|')

3. and operator: 
  -binary operator
  -lower priority than comparison operators

4. or operator
  -binary operator
  -priority lower than and operator

5. not operator:
  -unary operator
  -logical negation
  -highest priority, same as unary + ,-

6. Logical values- 0 ,1
-0: reset, False
-1: set, True

7. Bitwise Operators:
used only for integer values and not floating numbers
                      & (ampersand) ‒ bitwise conjunction;- both condition true for true result
                      | (bar) ‒ bitwise disjunction;- atleast one condition true for true result
                      ~ (tilde) ‒ bitwise negation;- if true then result is false, if false then result is true
                      ^ (caret) ‒ bitwise exclusive or (xor).- if both operand is identical then, result is false

8. Binary Shift Operator
used only for integer values and not floating numbers
-used in cryptographic operation,calculations where power of two is invloved, bit manupulation operations.

left shift: shift bits to left and fill gap with zero, inshort number is multiplied by 2.
right shift: shift bits to right, bits which are shifted to right are lost, inshort the number is divided by 2.


17 >> 2 is equivalent to 17//2, right shift
17 << 2, is equivalent to 17 *2, left shift

Priority:
unary operators > binary operators

 SECTION SUMMARY
1. Python supports the following logical operators:

        and → if both operands are true, the condition is true, e.g., (True and True) is True,
        or → if any of the operands are true, the condition is true, e.g., (True or False) is True,
        not → returns false if the result is true, and returns true if the result is false, e.g., not True is False.

2. You can use bitwise operators to manipulate single bits of data. The following sample data:

            x = 15, which is 0000 1111 in binary,
            y = 16, which is 0001 0000 in binary.
            will be used to illustrate the meaning of bitwise operators in Python. Analyze the examples below:
            
            & does a bitwise and, e.g., x & y = 0, which is 0000 0000 in binary,
            | does a bitwise or, e.g., x | y = 31, which is 0001 1111 in binary,
            ˜  does a bitwise not, e.g., ˜ x = 240*, which is 1111 0000 in binary,
            ^ does a bitwise xor, e.g., x ^ y = 31, which is 0001 1111 in binary,
            >> does a bitwise right shift, e.g., y >> 1 = 8, which is 0000 1000 in binary,
            << does a bitwise left shift, e.g., y << 3 = 128, which is 1000 0000 in binary.



